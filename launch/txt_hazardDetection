#!/usr/bin/env python3

from task_machine.StateMachine import * #StateMachine
import rospy
import time 
import datetime


def start(cargo_in, event_in, event_out):
    print("\n"+ "----------"+"\n")
    print( "START"+"\n")
    print( "----------"+"\n")
    print("\t cargo: "+ str( cargo_in)+"\n")
    print("\t STATE_EVENT: "+ str( event_in.isSet())+"\n")
    print( ""+"\n")
    if event_in.isSet():
        event_out.set()
        print( ""+"\n")
        print( "set HOLD"+"\n")
        print( ""+"\n")
        return ("first_hold", "data required to hold")
    return ("move_to_human", ["Zdzisiu", None])
    
def move_to_human(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "move_to_human"+"\n")
    print("----------"+"\n")
    print( "\t args [<human_name>, <init_human_pose>]: "+ str( cargo_in)+"\n")
    print( "\t Get pose of the human "+"\n")
    i = 0
    while i < 10:
        print( "\t Moving to the human: "+ str( cargo_in[0])+"\n")
        print( "\t Checking if the destination is reached"+"\n")
    # run_blocking(blocking_call, cargo_in, event)
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("hold_moving", "stop robot")
        time.sleep(1)
        i+=1
    return ("greet", "Hello, your examination will be proceed in room 10. Please follow me")

def hold_moving(cargo_in):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print("hold_moving"+"\n")
    print( "----------"+"\n")
    print("\t args: "+ str( cargo_in)+"\n")
    # run_blocking(blocking_call, cargo_in, event)
    return ("move_to_human", ["Zdzisiu",[10,20]])


def greet(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "greet"+"\n")
    print("----------"+"\n")

    i=0
    print( "\t SAY_METHOD("+ str( cargo_in)+")\n")
    while i < 5:
        print( "\t Checking if the speech is over"+"\n")
    # run_blocking(blocking_call, cargo_in, event)
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("hold_greet", "Oh! I'm sorry but I got very important request. Please wait, I'll come back")
        i+=1
        time.sleep(1)
    return ("guide_human", "room 10")

def hold_greet(cargo_in):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "SAY"+"\n")
    print("----------"+"\n")
    print( "\t SAY_METHOD("+ str( cargo_in)+")\n")
    return ("move_to_human", [1,2])

def guide_human(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "guide_human"+"\n")
    print("----------"+"\n")
    print( "\t args <destination>: "+ str( cargo_in)+"\n")
    i = 0
    while i < 10:
        print( "\t Moving to the destination: "+ str( cargo_in)+"\n")
        print( "\t Checking if the human is following me"+"\n")
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("hold_guide", None)
        i+=1
        time.sleep(1)
    return ("goodbye_human", None)

def hold_guide(cargo_in):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print("hold_guide"+"\n")
    print( "----------"+"\n")
    print("\t args: "+ str( cargo_in)+"\n")
    print( "\t Approaching human "+"\n")
    print( "\t SAY_METHOD("+ "Oh! I'm sorry but I got a very important request. Please wait, I'll come back"+")\n")
    print( "\t Go aside "+"\n")
    return ("move_to_human", ["Zdzisiu",[10,20]])

def goodbye_human(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "goodbye_human"+"\n")
    print("----------"+"\n")
    print( "\t args <destination>: "+ str( cargo_in)+"\n")
    print( "\t SAY_METHOD("+ "Here is the room 10"+")\n")
    i = 0
    while i < 5:
        print( "\t Checking if the speech is over"+"\n")
        print( "\t HOLD IS UNAVAILABLE"+"\n")

        i+=1
        time.sleep(1)
    return ("go_to_dock", None)

def go_to_dock(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "go_to_dock"+"\n")
    print("----------"+"\n")
    print( "\t args: "+ str( cargo_in)+"\n")
    i = 0
    while i < 5:
        print( "\t Moving to my dock"+")\n")
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("final", None)
        i+=1
        time.sleep(1)
    return ("final", None) 

def final(cargo_in):
    return

if __name__== "__main__":
    try:
        rospy.init_node("blockingState")
        f1=open('./blockin_log', 'w+')
        f2=open('./state_m_log', 'w+')
        m = StateMachine(f2)
        m.add_state("Start", start, None)
        m.add_state("move_to_human", move_to_human, None)
        m.add_state("hold_moving", hold_moving, None)
        m.add_state("greet", greet, None)
        m.add_state("hold_greet", hold_greet, None)
        m.add_state("guide_human", guide_human, None)
        m.add_state("hold_guide", hold_guide, None)
        m.add_state("goodbye_human", goodbye_human, None)
        m.add_state("go_to_dock", go_to_dock, None)
        m.add_state("final", final, end_state=True)
        m.set_start("Start")
        m.run("Python is great")
    #m.run("Python is difficult")
    #m.run("Perl is ugly")
    finally:
        f2.close()
        f1.close()