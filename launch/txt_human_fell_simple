#!/usr/bin/env python3

from task_machine.StateMachine import * #StateMachine
import rospy
import time 
import datetime
import sys

human_name="Zdzisiu"
human_pose=[0,0]
is_return_call=False
human_response=None

def start(cargo_in, event_in, event_out):
    print("\n"+ "----------"+"\n")
    print( "START"+"\n")
    print( "----------"+"\n")
    print("\t cargo: "+ str( cargo_in)+"\n")
    print("\t STATE_EVENT: "+ str( event_in.isSet())+"\n")
    print( ""+"\n")

    global human_name
    global human_pose
    global is_return_call
    global human_response
    human_name="Zdzisiu"
    is_return_call=False
    human_response=None    
    if event_in.isSet():
        event_out.set()
        print( ""+"\n")
        print( "set HOLD"+"\n")
        print( ""+"\n")
        return ("first_hold", "data required to hold")
    return ("move_to_human", None)
    
def move_to_human(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "move_to_human"+"\n")
    print("----------"+"\n")
    print( "\t args [None]: "+ str( cargo_in)+"\n")
    global human_name
    global human_pose
    global is_return_call
    global human_response
    print( "\t Get pose of the human "+"\n")
    # get human pose
    human_pose=[10,10]
    i = 0
    while i < 10:
        print( "\t Moving to the human: "+ str( human_name)+"\n")
        print( "\t Checking if the destination is reached"+"\n")
    # run_blocking(blocking_call, cargo_in, event)
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("hold_moving", None)
        time.sleep(1)
        i+=1
    return ("look_for_human", None)

def hold_moving(cargo_in):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print("hold_moving"+"\n")
    print( "----------"+"\n")
    print("\t args : "+ str( cargo_in)+"\n")
    # run_blocking(blocking_call, cargo_in, event)
    global human_pose
    print( "\t Update pose of the human "+"\n")
    # get human pose
    human_pose=[10,10]
    return ("move_to_human", None)

def look_for_human(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "look_for_human"+"\n")
    print("----------"+"\n")
    print( "\t args: "+ str( cargo_in)+"\n")
    i = 0
    while i < 10:
        print( "\t Visiual search for human \n")
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("hold_moving", None)
        time.sleep(1)
        i+=1
    global is_return_call
    if is_return_call:
        return ("send_report", None)
    global human_pose
    print( "\t Update pose of the human "+"\n")
    # get human pose
    human_pose=[11,11]

    return ("check_consciousness", None)


def check_consciousness(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "check_consciousness"+"\n")
    print("----------"+"\n")
    print( "\t args [<human_name>, <init_human_pose>, <is a resume call>]: "+ str( cargo_in)+"\n")

    global human_name
    global human_pose
    global is_return_call
    global human_response

    say = "Hello! Mr "+human_name+ "! Can you hear me? How do you feel?"
    response = "Uh! I fell, but I'm fine. Just need a hand to stand up."
    i=0
    print( "\t SAY_METHOD("+ str(say)+")\n")
    while i < 3:
        print( "\t Checking if the speech is over"+"\n")
    # run_blocking(blocking_call, cargo_in, event)
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            sentence = "Oh! I'm sorry but I got very important request. Please wait, I'll come back"
            return ("hold_talk", sentence)
        i+=1
        time.sleep(1)
    while i < 5:
        print( "\t Waiting for response "+"\n")
    # run_blocking(blocking_call, cargo_in, event)
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            sentence = "Oh! I'm sorry but I got very important request. Please wait, I'll come back"
            return ("hold_talk", sentence)
        i+=1
        time.sleep(1)
    response = "Uh! I fell, but I'm fine. Just need a hand to stand up."
    # cargo_out = [cargo_in[0], response,[10,10]]
    human_response = response
    return ("send_report", None)

def send_report(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "send_report"+"\n")
    print("----------"+"\n")
    print( "\t args: "+ str( cargo_in)+"\n")
    # if the response is None, it is a return call and the old report was saved
    i = 0
    while i < 3:
        print( "\t Preparing and sending report"+")\n")
        print( "\t HOLD IS UNAVAILABLE"+"\n")
        i+=1
        time.sleep(1)
    return ("goodbye_human", None) 

#TO DO!
def hold_talk(cargo_in):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "SAY"+"\n")
    print("----------"+"\n")
    print( "\t SAY_METHOD("+ str( cargo_in)+")\n")
    return ("move_to_human", None)

def goodbye_human(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "goodbye_human"+"\n")
    print("----------"+"\n")
    print( "\t args: "+ str( cargo_in)+"\n")
    print( "\t SAY_METHOD("+ "My task is finished, goodbye"+")\n")
    i = 0
    while i < 5:
        print( "\t Checking if the speech is over"+"\n")
        print( "\t HOLD IS UNAVAILABLE"+"\n")

        i+=1
        time.sleep(1)
    return ("go_to_dock", None)

def go_to_dock(cargo_in, event_in, event_out):
    print(str(datetime.datetime.now().time())+"\n"+ "----------"+"\n")
    print( "go_to_dock"+"\n")
    print("----------"+"\n")
    print( "\t args: "+ str( cargo_in)+"\n")
    i = 0
    while i < 5:
        print( "\t Moving to my dock"+")\n")
        if event_in.isSet():
            event_out.set()
            print( ""+"\n")
            print( "set HOLD"+"\n")
            print( ""+"\n")
            return ("final", None)
        i+=1
        time.sleep(1)
    return ("final", None) 

def final(cargo_in):
    return

if __name__== "__main__":
    try:
        rospy.init_node("human_fell_simple", anonymous=True)
        f1=open('./blockin_log', 'w+')
        f2=open('./state_m_log', 'w+')
        m = StateMachine(f2)
        m.add_state("Start", start, None)
        m.add_state("move_to_human", move_to_human, None)
        m.add_state("look_for_human", look_for_human, None)
        m.add_state("check_consciousness", check_consciousness, None)
        m.add_state("send_report", send_report, None)
        m.add_state("go_to_dock", go_to_dock, None)
        m.add_state("final", final, end_state=True)
        m.add_state("hold_talk", hold_talk, None)
        m.add_state("hold_moving", hold_moving, None)
        m.add_state("goodbye_human", goodbye_human, None)

        m.set_start("Start")
        m.run("Python is great")
    #m.run("Python is difficult")
    #m.run("Perl is ugly")
    finally:
        f2.close()
        f1.close()